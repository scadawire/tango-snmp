# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#
# This base image is based on debian:buster-slim and contains:
#  * gcc 8.3.0
#  * clang 7.0.1
#  * cmake 3.13.4
#  * and more
#
# For details see https://github.com/ska-telescope/cpp_build_base
#

# how to combine these two docker images? 
image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base
#image: nexus.engageska-portugal.pt/ska-docker/tango-cpp
#services: 
    #- nexus.engageska-portugal.pt/ska-docker/tango-dependencies
    #- nexus.engageska-portugal.pt/ska-docker/tango-cpp
    #- nexus.engageska-portugal.pt/ska-docker/tango-pogo

variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: normal

  # AB - trying to see if this will run on default GitLab runners
  #.common: {tags: [engageska, docker]}
  # also commented out all "extends common" lines below.

stages:
  - build
  - linting
  - test
  - pages

build_release:
    #  extends: .common
  stage: build
  before_script:
      # these finds were used for figuring out what is installed in which docker image
      - find / -iname 'tango.h' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
      - find / -iname 'libtango.so' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
      - find / -iname 'net-snmp-includes.h' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
      - find / -iname 'libsnmp.so' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
      - export DEBIAN_FRONTEND=noninteractive
      - apt update
      - apt install -y libsnmp-dev
      # tango-cpp image does not have cmake... but "apt update" doesn't even have permission to run on tango-cpp image.
      #- apt install -y cmake
      # cpp_build_base image does not have the tango libraries we need
      - apt install -y libtango-dev
  script:
      - mkdir build
      - cd build
      - cmake .. -DCMAKE_BUILD_TYPE=Release
      - make
      # the below is taken from the test_install job, I can't get it to work in that job...
      # (it tries to rebuild, but lacking the headers it can't - but it shouldn't need to rebuild...)
      - cmake . -DCMAKE_INSTALL_PREFIX=/opt
      - make install
  artifacts:
    paths:
      - build

test_tango:
  image: nexus.engageska-portugal.pt/ska-docker/tango-cpp
  stage: test
  dependencies:
      - build_release
  script:
      - cd build/bin
      - ./TangoSnmp test


###################################################
# Below are parts of the template that don't work  / don't do anything useful
# (I haven't tried to make them work yet)
#
##################################################

#build_debug:
#      extends: .common
#  stage: build
#  # instead of calling g++ directly you can also use some build toolkit like make
#  # install the necessary build tools when needed
#  script:
#    - mkdir build
#    - cd build
#    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"
#    - make
#  artifacts:
#    paths:
#      - build

test:
    #  extends: .common
  stage: test
  dependencies:
      #- build_debug
      - build_release
  script:
    - cd build
    - ctest -T test --no-compress-output
  after_script:
    - cd build
    - ctest2junit > ctest.xml
  artifacts:
    paths:
      - build/
    reports:
      junit: build/ctest.xml

#
#build_export_compile_commands:
#    # extends: .common
# stage: build
# script:
#    - rm -rf build && mkdir build
#    - cd build
#      #- cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER=clang++
# artifacts:
#    paths:
#      - build

#lint_clang_tidy:
#    #  extends: .common
#  stage: linting
#  dependencies:
#    - build_export_compile_commands
#  script:
#    - cd build
#    - run-clang-tidy -checks='cppcoreguidelines-*,performance-*,readibility-*,modernize-*,misc-*,clang-analyzer-*,google-*'

#lint_iwyu:
#    #  extends: .common
#  stage: linting
#  dependencies:
#    - build_export_compile_commands
#  script:
#    - cd build
#    - iwyu_tool -p .

#lint_cppcheck:
#    #  extends: .common
#  stage: linting
#  dependencies:
#    - build_export_compile_commands
#  script:
#    - cd build
#    - cppcheck --error-exitcode=1 --project=compile_commands.json -q --std=c++14 -i $PWD/../external -i $PWD/../src/ska/helloworld/test
#test_installation:
#    #  extends: .common
#  stage: test
#  dependencies:
#    - build_release
#  script:
#    - cd build
#    - make --version
#    # make will try (and fail) to rebuild because the source is newer than the build
#    # so we make the build look nice and fresh
#    - find . -type f -exec touch {} +  
#    # this ls is for CI debugging only
#    - ls .. -laR > ls_before_cmake.txt
#    - cmake . -DCMAKE_INSTALL_PREFIX=/opt
#    - find . -type f -exec touch {} +  
#    - find . -type f -name '*.make' -exec touch {} +  
#    - find . -type f -name '*.o' -exec touch {} +  
#    - find . -type f -name 'link.txt' -exec touch {} +  
#    - touch bin/TangoSnmp
#    - ls .. -laR > ls_after_cmake.txt
#    - make install --trace -d
#     # artifacts for CI debugging
#  artifacts:
#      when: always
#      paths:
#          - build
#   ### Below is from cpp-template original test_install step
#   - cd ../examples/helloworld-user
#    - if [ -d build ]; then rm -rf build; fi 
#    - mkdir build
#    - cd build
#    - cmake .. -DCMAKE_PREFIX_PATH=/opt
#    - make all

#test_as_subproject:
#    #  extends: .common
#  stage: test
#  script:
#    - cp -r examples/helloworld-user ..
#    - cd ../helloworld-user
#    - sed -i 's/find_package(HelloWorld)/add_subdirectory(..\/cpp-template helloworld EXCLUDE_FROM_ALL)/' CMakeLists.txt
#    - if [ -d build ]; then rm -rf build; fi 
#    - mkdir build
#    - cd build
#    - cmake ..
#    - make all

# A job that runs the tests under valgrid
# It might take a while, so not always run by default
#test_memcheck:
#    #  extends: .common
#  stage: test
#  dependencies:
#    - build_debug
#  before_script:
#    - apt update && apt install -y valgrind
#  script:
#    - cd build
#    - ctest -T memcheck
#  only:
#    - tags
#    - schedules

pages:
    #  extends: .common
  stage: pages
  dependencies:
    - test
  script:
    - mkdir .public
    - cd .public
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --html --html-details -o index.html
    - cd ..
    - mv .public public
  artifacts:
    paths:
      - public
