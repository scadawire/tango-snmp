# This file is a mash-up between the SKA cpp-template and other tango projects.

variables:
    # Needed if you want automatic submodule checkout
    # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
    GIT_SUBMODULE_STRATEGY: normal
    IMAGE_NAME: tangosnmp-test
    DOCKER_DRIVER: overlay2

stages:
    - compile
    - build
    - linting
    - test
    - publish
    - pages

# Update the "tangosnmp-builder" image which is used to compile the code.
# This only needs to be done when tango-builder is updated,
# or to use a newer version of libsnmp/g++.
builder:
    image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
    tags: 
        - k8srunner
    stage: compile
    when: manual
    script:
        - cd docker
        - export DOCKER_REGISTRY_USER=ska-docker
        - export IMAGE=$DOCKER_REGISTRY_HOST/$DOCKER_REGISTRY_USER/tangosnmp-builder
        - export VERSION=`date +"%Y-%m-%d"`
        - docker build -t ${IMAGE}:${VERSION} . -f Dockerfile.build --build-arg DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST --build-arg DOCKER_REGISTRY_USER=$DOCKER_REGISTRY_USER
        - docker push ${IMAGE}:${VERSION}
        - docker tag ${IMAGE}:${VERSION} ${IMAGE}:latest
        - docker push ${IMAGE}:latest

# Update the "tangosnmp-tester" image which is used to run tests.
# This only needs to be done when the tester needs new stuff
# (e.g. use a newer version of libsnmp/g++)
#tester:
#    image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
#    services:
#        - docker:dind
#    extends: .common
#    stage: infrastructure
#    when: manual
#    script:
#        - cd docker/tester
#        - export DOCKER_REGISTRY_USER=ska-docker
#        - ./build_tester.sh push

# compile C++ code, creating an executable that will later be packaged into a docker image
compile:
    image: nexus.engageska-portugal.pt/ska-docker/tangosnmp-builder
    stage: compile
    script:
        - mkdir build
        - cd build
        - cmake .. -DCMAKE_BUILD_TYPE=Release
        - make install
    cache:
        paths:
            - build
    artifacts:
        paths:
            - build

# build docker image
build:
  stage: build
  tags:
    - k8srunner
  script:
    - if [ -d "build" ]; then ls -la build; for item in $(ls build); do
    - echo "+++ Contents of $item ++++";
    - if [ -d "build/$item" ]; then echo "$item is a directory"; else
    - cat build/$item; fi; done; fi
    - make build
  artifacts:
    when: always
    paths:
      - build
#test_tango:
#  image: nexus.engageska-portugal.pt/ska-docker/tango-cpp
#  stage: test
#  dependencies:
#      - build_release
#  before_script:
#      # these finds used for figuring out what is installed in each docker image
#      - find / -iname 'tango.h' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
#      - find / -iname 'libtango.so' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
#      - find / -iname 'net-snmp-includes.h' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
#      - find / -iname 'libsnmp.so' 2>/dev/null || echo 'find exited with non-zero, continue anyway'
#      - export DEBIAN_FRONTEND=noninteractive
#      - sudo apt update -qq
#      - sudo apt install -y -qq libsnmp-dev
#  script:
#      - cd build/bin
#      - ./TangoSnmp test || echo 'execution failed, as expected...'

test image:
    tags:
        - k8srunner
    image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
    stage: test
    #dependencies:
    #    - build_release
    script:
        - cd docker
        - make build
        - make test
    artifacts:
        paths:
            - build

#
#publish image:
#    tags:
#        - engageska, shell
#    image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base
#    stage: publish
#    dependencies:
#        - build_release
#    script:
#        - cd docker
#        - make push
#    when: manual
#
#pages:
#    extends: .common
#    image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base
#    stage: pages
#    dependencies:
#        - test image
#    before_script:
#        - apt update && apt install -y curl
#    script:
#        - mkdir -p .public/build/reports
#        - cd .public
#        - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --html --html-details -o index.html
#        - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --xml -o build/reports/code-coverage.xml
#          # these steps fail because ctest currently does no tests, hence no report
#          #- cp ../build/ctest.xml build/reports/unit-tests.xml
#          # Create and upload GitLab badges
#          #- python ../.produce-ci-metrics.py build/reports > ci-metrics.json
#        - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
#        - cd ..
#        - mv .public public
#    artifacts:
#        paths:
#            - public
#
#
#ctest:
#    tags:
#        - docker-executor
#    image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base
#    stage: test
#    dependencies:
#        - build_release
#          #- build_debug
#    script:
#        - cd build
#        - ctest -T test --no-compress-output
#    after_script:
#        - cd build
#        - ctest2junit > ctest.xml
#    artifacts:
#        paths:
#            - build/
#        reports:
#            junit: build/ctest.xml
