/*----- PROTECTED REGION ID(TangoSnmpStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id$";
//=============================================================================
//
// file :        TangoSnmpStateMachine.cpp
//
// description : State machine file for the TangoSnmp class
//
// project :     Tango<-->Snmp link
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author$
//
// $Revision$
// $Date$
//
// $HeadURL$
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <TangoSnmp.h>

/*----- PROTECTED REGION END -----*/	//	TangoSnmp::TangoSnmpStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================
//  ON      |  The device is ON and it`s possible to communicate with the SNMP agent
//  FAULT   |  Impossible to create a connection to the snmp agent
//  ALARM   |  The device is in ALARM state for one of the following reasons:
//          |  - Impossible to load the MIB file specified in the property
//          |  - One of dynamic attribute definition is incoherent with what is found in MIB file


namespace TangoSnmp_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : TangoSnmp::is_MIBFileDirs_allowed()
 *	Description : Execution allowed for MIBFileDirs attribute
 */
//--------------------------------------------------------
bool TangoSnmp::is_MIBFileDirs_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for MIBFileDirs attribute in read access.
	/*----- PROTECTED REGION ID(TangoSnmp::MIBFileDirsStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TangoSnmp::MIBFileDirsStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoSnmp::is_LoadedMIBModules_allowed()
 *	Description : Execution allowed for LoadedMIBModules attribute
 */
//--------------------------------------------------------
bool TangoSnmp::is_LoadedMIBModules_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for LoadedMIBModules attribute in read access.
	/*----- PROTECTED REGION ID(TangoSnmp::LoadedMIBModulesStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TangoSnmp::LoadedMIBModulesStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : TangoSnmp::is_GetSnmpData_allowed()
 *	Description : Execution allowed for GetSnmpData attribute
 */
//--------------------------------------------------------
bool TangoSnmp::is_GetSnmpData_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for GetSnmpData command.
	/*----- PROTECTED REGION ID(TangoSnmp::GetSnmpDataStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TangoSnmp::GetSnmpDataStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoSnmp::is_SetSnmpData_allowed()
 *	Description : Execution allowed for SetSnmpData attribute
 */
//--------------------------------------------------------
bool TangoSnmp::is_SetSnmpData_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::FAULT)
	{
	/*----- PROTECTED REGION ID(TangoSnmp::SetSnmpDataStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TangoSnmp::SetSnmpDataStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TangoSnmp::is_Simulate_allowed()
 *	Description : Execution allowed for Simulate attribute
 */
//--------------------------------------------------------
bool TangoSnmp::is_Simulate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Simulate command.
	/*----- PROTECTED REGION ID(TangoSnmp::SimulateStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TangoSnmp::SimulateStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(TangoSnmp::TangoSnmpStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	TangoSnmp::TangoSnmpStateAllowed.AdditionalMethods

}	//	End of namespace
